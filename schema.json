type Asset implements Node {
  areaconst: Float!

  """Reads and enables pagination through a set of `AssetsParent`."""
  assetsParentsById(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssetsParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AssetsParent`."""
    orderBy: [AssetsParentsOrderBy!] = [NATURAL]
  ): AssetsParentsConnection!

  """Reads and enables pagination through a set of `AssetsParent`."""
  assetsParentsByParent(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssetsParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AssetsParent`."""
    orderBy: [AssetsParentsOrderBy!] = [NATURAL]
  ): AssetsParentsConnection!

  """Reads and enables pagination through a set of `CaesbMetersAsset`."""
  caesbMetersAssetsByAssetId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaesbMetersAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaesbMetersAsset`."""
    orderBy: [CaesbMetersAssetsOrderBy!] = [NATURAL]
  ): CaesbMetersAssetsConnection!

  """Reads and enables pagination through a set of `CebMetersAsset`."""
  cebMetersAssetsByAssetId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CebMetersAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CebMetersAsset`."""
    orderBy: [CebMetersAssetsOrderBy!] = [NATURAL]
  ): CebMetersAssetsConnection!
  id: String!
  lat: Float!
  lon: Float!
  modelo: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  nome: String!
  serie: String!
  subnome: String!
  tipo: String!
  visita: Boolean!

  """Reads and enables pagination through a set of `WosAsset`."""
  wosAssetsByAssetId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WosAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WosAsset`."""
    orderBy: [WosAssetsOrderBy!] = [NATURAL]
  ): WosAssetsConnection!
}

"""
A condition to be used against `Asset` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AssetCondition {
  """Checks for equality with the object’s `areaconst` field."""
  areaconst: Float

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `lat` field."""
  lat: Float

  """Checks for equality with the object’s `lon` field."""
  lon: Float

  """Checks for equality with the object’s `modelo` field."""
  modelo: String

  """Checks for equality with the object’s `nome` field."""
  nome: String

  """Checks for equality with the object’s `serie` field."""
  serie: String

  """Checks for equality with the object’s `subnome` field."""
  subnome: String

  """Checks for equality with the object’s `tipo` field."""
  tipo: String

  """Checks for equality with the object’s `visita` field."""
  visita: Boolean
}

"""An input for mutations affecting `Asset`"""
input AssetInput {
  areaconst: Float!
  id: String!
  lat: Float!
  lon: Float!
  modelo: String!
  nome: String!
  serie: String!
  subnome: String!
  tipo: String!
  visita: Boolean!
}

"""
Represents an update to a `Asset`. Fields that are set will be updated.
"""
input AssetPatch {
  areaconst: Float
  id: String
  lat: Float
  lon: Float
  modelo: String
  nome: String
  serie: String
  subnome: String
  tipo: String
  visita: Boolean
}

"""A connection to a list of `Asset` values."""
type AssetsConnection {
  """
  A list of edges which contains the `Asset` and cursor to aid in pagination.
  """
  edges: [AssetsEdge!]!

  """A list of `Asset` objects."""
  nodes: [Asset]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Asset` you could get from the connection."""
  totalCount: Int!
}

"""A `Asset` edge in the connection."""
type AssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Asset` at the end of the edge."""
  node: Asset
}

"""Methods to use when ordering `Asset`."""
enum AssetsOrderBy {
  AREACONST_ASC
  AREACONST_DESC
  ID_ASC
  ID_DESC
  LAT_ASC
  LAT_DESC
  LON_ASC
  LON_DESC
  MODELO_ASC
  MODELO_DESC
  NATURAL
  NOME_ASC
  NOME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERIE_ASC
  SERIE_DESC
  SUBNOME_ASC
  SUBNOME_DESC
  TIPO_ASC
  TIPO_DESC
  VISITA_ASC
  VISITA_DESC
}

type AssetsParent {
  """Reads a single `Asset` that is related to this `AssetsParent`."""
  assetById: Asset

  """Reads a single `Asset` that is related to this `AssetsParent`."""
  assetByParent: Asset
  id: String
  parent: String
}

"""
A condition to be used against `AssetsParent` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssetsParentCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `parent` field."""
  parent: String
}

"""An input for mutations affecting `AssetsParent`"""
input AssetsParentInput {
  id: String
  parent: String
}

"""A connection to a list of `AssetsParent` values."""
type AssetsParentsConnection {
  """
  A list of edges which contains the `AssetsParent` and cursor to aid in pagination.
  """
  edges: [AssetsParentsEdge!]!

  """A list of `AssetsParent` objects."""
  nodes: [AssetsParent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssetsParent` you could get from the connection."""
  totalCount: Int!
}

"""A `AssetsParent` edge in the connection."""
type AssetsParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssetsParent` at the end of the edge."""
  node: AssetsParent
}

"""Methods to use when ordering `AssetsParent`."""
enum AssetsParentsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ASC
  PARENT_DESC
}

"""A connection to a list of `CaesbDatum` values."""
type CaesbDataConnection {
  """
  A list of edges which contains the `CaesbDatum` and cursor to aid in pagination.
  """
  edges: [CaesbDataEdge!]!

  """A list of `CaesbDatum` objects."""
  nodes: [CaesbDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CaesbDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `CaesbDatum` edge in the connection."""
type CaesbDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaesbDatum` at the end of the edge."""
  node: CaesbDatum
}

"""Methods to use when ordering `CaesbDatum`."""
enum CaesbDataOrderBy {
  AAMM_ASC
  AAMM_DESC
  ADIC_ASC
  ADIC_DESC
  COFINS_ASC
  COFINS_DESC
  CONSF_ASC
  CONSF_DESC
  CONSM_ASC
  CONSM_DESC
  CSLL_ASC
  CSLL_DESC
  DIF_ASC
  DIF_DESC
  DLAN_ASC
  DLAN_DESC
  DLAT_ASC
  DLAT_DESC
  IRPJ_ASC
  IRPJ_DESC
  LAN_ASC
  LAN_DESC
  LAT_ASC
  LAT_DESC
  MED_ASC
  MED_DESC
  NATURAL
  PASEP_ASC
  PASEP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUBTOTAL_ASC
  SUBTOTAL_DESC
  VAGU_ASC
  VAGU_DESC
  VESG_ASC
  VESG_DESC
}

type CaesbDatum implements Node {
  aamm: Int!
  adic: Float!

  """Reads a single `CaesbMeter` that is related to this `CaesbDatum`."""
  caesbMeterByMed: CaesbMeter
  cofins: Float!
  consf: Int!
  consm: Int!
  csll: Float!
  dif: Int!
  dlan: Int!
  dlat: Int!
  irpj: Float!
  lan: Int!
  lat: Int!
  med: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pasep: Float!
  subtotal: Float!
  vagu: Float!
  vesg: Float!
}

"""
A condition to be used against `CaesbDatum` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CaesbDatumCondition {
  """Checks for equality with the object’s `aamm` field."""
  aamm: Int

  """Checks for equality with the object’s `adic` field."""
  adic: Float

  """Checks for equality with the object’s `cofins` field."""
  cofins: Float

  """Checks for equality with the object’s `consf` field."""
  consf: Int

  """Checks for equality with the object’s `consm` field."""
  consm: Int

  """Checks for equality with the object’s `csll` field."""
  csll: Float

  """Checks for equality with the object’s `dif` field."""
  dif: Int

  """Checks for equality with the object’s `dlan` field."""
  dlan: Int

  """Checks for equality with the object’s `dlat` field."""
  dlat: Int

  """Checks for equality with the object’s `irpj` field."""
  irpj: Float

  """Checks for equality with the object’s `lan` field."""
  lan: Int

  """Checks for equality with the object’s `lat` field."""
  lat: Int

  """Checks for equality with the object’s `med` field."""
  med: Int

  """Checks for equality with the object’s `pasep` field."""
  pasep: Float

  """Checks for equality with the object’s `subtotal` field."""
  subtotal: Float

  """Checks for equality with the object’s `vagu` field."""
  vagu: Float

  """Checks for equality with the object’s `vesg` field."""
  vesg: Float
}

"""An input for mutations affecting `CaesbDatum`"""
input CaesbDatumInput {
  aamm: Int!
  adic: Float!
  cofins: Float!
  consf: Int!
  consm: Int!
  csll: Float!
  dif: Int!
  dlan: Int!
  dlat: Int!
  irpj: Float!
  lan: Int!
  lat: Int!
  med: Int!
  pasep: Float!
  subtotal: Float!
  vagu: Float!
  vesg: Float!
}

"""
Represents an update to a `CaesbDatum`. Fields that are set will be updated.
"""
input CaesbDatumPatch {
  aamm: Int
  adic: Float
  cofins: Float
  consf: Int
  consm: Int
  csll: Float
  dif: Int
  dlan: Int
  dlat: Int
  irpj: Float
  lan: Int
  lat: Int
  med: Int
  pasep: Float
  subtotal: Float
  vagu: Float
  vesg: Float
}

type CaesbMeter implements Node {
  """Reads and enables pagination through a set of `CaesbDatum`."""
  caesbDataByMed(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaesbDatumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaesbDatum`."""
    orderBy: [CaesbDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbDataConnection!

  """Reads and enables pagination through a set of `CaesbMetersAsset`."""
  caesbMetersAssetsByMed(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaesbMetersAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaesbMetersAsset`."""
    orderBy: [CaesbMetersAssetsOrderBy!] = [NATURAL]
  ): CaesbMetersAssetsConnection!
  cat: Int!
  contrato: String!
  hidrom: String!
  id: String!
  med: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  nome: String!
}

"""
A condition to be used against `CaesbMeter` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CaesbMeterCondition {
  """Checks for equality with the object’s `cat` field."""
  cat: Int

  """Checks for equality with the object’s `contrato` field."""
  contrato: String

  """Checks for equality with the object’s `hidrom` field."""
  hidrom: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `med` field."""
  med: Int

  """Checks for equality with the object’s `nome` field."""
  nome: String
}

"""An input for mutations affecting `CaesbMeter`"""
input CaesbMeterInput {
  cat: Int!
  contrato: String!
  hidrom: String!
  id: String!
  med: Int!
  nome: String!
}

"""
Represents an update to a `CaesbMeter`. Fields that are set will be updated.
"""
input CaesbMeterPatch {
  cat: Int
  contrato: String
  hidrom: String
  id: String
  med: Int
  nome: String
}

type CaesbMetersAsset {
  """Reads a single `Asset` that is related to this `CaesbMetersAsset`."""
  assetByAssetId: Asset
  assetId: String!

  """
  Reads a single `CaesbMeter` that is related to this `CaesbMetersAsset`.
  """
  caesbMeterByMed: CaesbMeter
  med: Int!
}

"""
A condition to be used against `CaesbMetersAsset` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CaesbMetersAssetCondition {
  """Checks for equality with the object’s `assetId` field."""
  assetId: String

  """Checks for equality with the object’s `med` field."""
  med: Int
}

"""An input for mutations affecting `CaesbMetersAsset`"""
input CaesbMetersAssetInput {
  assetId: String!
  med: Int!
}

"""A connection to a list of `CaesbMetersAsset` values."""
type CaesbMetersAssetsConnection {
  """
  A list of edges which contains the `CaesbMetersAsset` and cursor to aid in pagination.
  """
  edges: [CaesbMetersAssetsEdge!]!

  """A list of `CaesbMetersAsset` objects."""
  nodes: [CaesbMetersAsset]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaesbMetersAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaesbMetersAsset` edge in the connection."""
type CaesbMetersAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaesbMetersAsset` at the end of the edge."""
  node: CaesbMetersAsset
}

"""Methods to use when ordering `CaesbMetersAsset`."""
enum CaesbMetersAssetsOrderBy {
  ASSET_ID_ASC
  ASSET_ID_DESC
  MED_ASC
  MED_DESC
  NATURAL
}

"""A connection to a list of `CaesbMeter` values."""
type CaesbMetersConnection {
  """
  A list of edges which contains the `CaesbMeter` and cursor to aid in pagination.
  """
  edges: [CaesbMetersEdge!]!

  """A list of `CaesbMeter` objects."""
  nodes: [CaesbMeter]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CaesbMeter` you could get from the connection."""
  totalCount: Int!
}

"""A `CaesbMeter` edge in the connection."""
type CaesbMetersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaesbMeter` at the end of the edge."""
  node: CaesbMeter
}

"""Methods to use when ordering `CaesbMeter`."""
enum CaesbMetersOrderBy {
  CAT_ASC
  CAT_DESC
  CONTRATO_ASC
  CONTRATO_DESC
  HIDROM_ASC
  HIDROM_DESC
  ID_ASC
  ID_DESC
  MED_ASC
  MED_DESC
  NATURAL
  NOME_ASC
  NOME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `CebDatum` values."""
type CebDataConnection {
  """
  A list of edges which contains the `CebDatum` and cursor to aid in pagination.
  """
  edges: [CebDataEdge!]!

  """A list of `CebDatum` objects."""
  nodes: [CebDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CebDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `CebDatum` edge in the connection."""
type CebDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CebDatum` at the end of the edge."""
  node: CebDatum
}

"""Methods to use when ordering `CebDatum`."""
enum CebDataOrderBy {
  AAMM_ASC
  AAMM_DESC
  BASEC_ASC
  BASEC_DESC
  CIP_ASC
  CIP_DESC
  CONFAT_ASC
  CONFAT_DESC
  DATAV_ASC
  DATAV_DESC
  DCF_ASC
  DCF_DESC
  DCP_ASC
  DCP_DESC
  DESCONTO_ASC
  DESCONTO_DESC
  DFF_ASC
  DFF_DESC
  DFP_ASC
  DFP_DESC
  DMF_ASC
  DMF_DESC
  DMP_ASC
  DMP_DESC
  ICMS_ASC
  ICMS_DESC
  JMA_ASC
  JMA_DESC
  KWH_ASC
  KWH_DESC
  KWHF_ASC
  KWHF_DESC
  KWHP_ASC
  KWHP_DESC
  MED_ASC
  MED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TIPO_ASC
  TIPO_DESC
  TRIB_ASC
  TRIB_DESC
  UFERF_ASC
  UFERF_DESC
  UFERP_ASC
  UFERP_DESC
  VBRU_ASC
  VBRU_DESC
  VDFF_ASC
  VDFF_DESC
  VDFP_ASC
  VDFP_DESC
  VEREXF_ASC
  VEREXF_DESC
  VEREXP_ASC
  VEREXP_DESC
  VLIQ_ASC
  VLIQ_DESC
  VUDF_ASC
  VUDF_DESC
  VUDP_ASC
  VUDP_DESC
}

type CebDatum implements Node {
  aamm: Int!
  basec: Float!

  """Reads a single `CebMeter` that is related to this `CebDatum`."""
  cebMeterByMed: CebMeter
  cip: Float!
  confat: Int!
  datav: Int!
  dcf: Int!
  dcp: Int!
  desconto: Float!
  dff: Int!
  dfp: Int!
  dmf: Int!
  dmp: Int!
  icms: Float!
  jma: Float!
  kwh: Int!
  kwhf: Int!
  kwhp: Int!
  med: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tipo: Int!
  trib: Float!
  uferf: Int!
  uferp: Int!
  vbru: Float!
  vdff: Float!
  vdfp: Float!
  verexf: Float!
  verexp: Float!
  vliq: Float!
  vudf: Float!
  vudp: Float!
}

"""
A condition to be used against `CebDatum` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CebDatumCondition {
  """Checks for equality with the object’s `aamm` field."""
  aamm: Int

  """Checks for equality with the object’s `basec` field."""
  basec: Float

  """Checks for equality with the object’s `cip` field."""
  cip: Float

  """Checks for equality with the object’s `confat` field."""
  confat: Int

  """Checks for equality with the object’s `datav` field."""
  datav: Int

  """Checks for equality with the object’s `dcf` field."""
  dcf: Int

  """Checks for equality with the object’s `dcp` field."""
  dcp: Int

  """Checks for equality with the object’s `desconto` field."""
  desconto: Float

  """Checks for equality with the object’s `dff` field."""
  dff: Int

  """Checks for equality with the object’s `dfp` field."""
  dfp: Int

  """Checks for equality with the object’s `dmf` field."""
  dmf: Int

  """Checks for equality with the object’s `dmp` field."""
  dmp: Int

  """Checks for equality with the object’s `icms` field."""
  icms: Float

  """Checks for equality with the object’s `jma` field."""
  jma: Float

  """Checks for equality with the object’s `kwh` field."""
  kwh: Int

  """Checks for equality with the object’s `kwhf` field."""
  kwhf: Int

  """Checks for equality with the object’s `kwhp` field."""
  kwhp: Int

  """Checks for equality with the object’s `med` field."""
  med: Int

  """Checks for equality with the object’s `tipo` field."""
  tipo: Int

  """Checks for equality with the object’s `trib` field."""
  trib: Float

  """Checks for equality with the object’s `uferf` field."""
  uferf: Int

  """Checks for equality with the object’s `uferp` field."""
  uferp: Int

  """Checks for equality with the object’s `vbru` field."""
  vbru: Float

  """Checks for equality with the object’s `vdff` field."""
  vdff: Float

  """Checks for equality with the object’s `vdfp` field."""
  vdfp: Float

  """Checks for equality with the object’s `verexf` field."""
  verexf: Float

  """Checks for equality with the object’s `verexp` field."""
  verexp: Float

  """Checks for equality with the object’s `vliq` field."""
  vliq: Float

  """Checks for equality with the object’s `vudf` field."""
  vudf: Float

  """Checks for equality with the object’s `vudp` field."""
  vudp: Float
}

"""An input for mutations affecting `CebDatum`"""
input CebDatumInput {
  aamm: Int!
  basec: Float!
  cip: Float!
  confat: Int!
  datav: Int!
  dcf: Int!
  dcp: Int!
  desconto: Float!
  dff: Int!
  dfp: Int!
  dmf: Int!
  dmp: Int!
  icms: Float!
  jma: Float!
  kwh: Int!
  kwhf: Int!
  kwhp: Int!
  med: Int!
  tipo: Int!
  trib: Float!
  uferf: Int!
  uferp: Int!
  vbru: Float!
  vdff: Float!
  vdfp: Float!
  verexf: Float!
  verexp: Float!
  vliq: Float!
  vudf: Float!
  vudp: Float!
}

"""
Represents an update to a `CebDatum`. Fields that are set will be updated.
"""
input CebDatumPatch {
  aamm: Int
  basec: Float
  cip: Float
  confat: Int
  datav: Int
  dcf: Int
  dcp: Int
  desconto: Float
  dff: Int
  dfp: Int
  dmf: Int
  dmp: Int
  icms: Float
  jma: Float
  kwh: Int
  kwhf: Int
  kwhp: Int
  med: Int
  tipo: Int
  trib: Float
  uferf: Int
  uferp: Int
  vbru: Float
  vdff: Float
  vdfp: Float
  verexf: Float
  verexp: Float
  vliq: Float
  vudf: Float
  vudp: Float
}

type CebMeter implements Node {
  """Reads and enables pagination through a set of `CebDatum`."""
  cebDataByMed(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CebDatumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CebDatum`."""
    orderBy: [CebDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebDataConnection!

  """Reads and enables pagination through a set of `CebMetersAsset`."""
  cebMetersAssetsByMed(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CebMetersAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CebMetersAsset`."""
    orderBy: [CebMetersAssetsOrderBy!] = [NATURAL]
  ): CebMetersAssetsConnection!
  classe: String!
  contrato: String!
  dcf: Int!
  dcp: Int!
  grupo: String!
  id: String!
  ligacao: String!
  med: Int!
  modtar: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  nome: String!
  subclasse: String!
  subgrupo: String!
}

"""
A condition to be used against `CebMeter` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CebMeterCondition {
  """Checks for equality with the object’s `classe` field."""
  classe: String

  """Checks for equality with the object’s `contrato` field."""
  contrato: String

  """Checks for equality with the object’s `dcf` field."""
  dcf: Int

  """Checks for equality with the object’s `dcp` field."""
  dcp: Int

  """Checks for equality with the object’s `grupo` field."""
  grupo: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `ligacao` field."""
  ligacao: String

  """Checks for equality with the object’s `med` field."""
  med: Int

  """Checks for equality with the object’s `modtar` field."""
  modtar: String

  """Checks for equality with the object’s `nome` field."""
  nome: String

  """Checks for equality with the object’s `subclasse` field."""
  subclasse: String

  """Checks for equality with the object’s `subgrupo` field."""
  subgrupo: String
}

"""An input for mutations affecting `CebMeter`"""
input CebMeterInput {
  classe: String!
  contrato: String!
  dcf: Int!
  dcp: Int!
  grupo: String!
  id: String!
  ligacao: String!
  med: Int!
  modtar: String!
  nome: String!
  subclasse: String!
  subgrupo: String!
}

"""
Represents an update to a `CebMeter`. Fields that are set will be updated.
"""
input CebMeterPatch {
  classe: String
  contrato: String
  dcf: Int
  dcp: Int
  grupo: String
  id: String
  ligacao: String
  med: Int
  modtar: String
  nome: String
  subclasse: String
  subgrupo: String
}

type CebMetersAsset {
  """Reads a single `Asset` that is related to this `CebMetersAsset`."""
  assetByAssetId: Asset
  assetId: String!

  """Reads a single `CebMeter` that is related to this `CebMetersAsset`."""
  cebMeterByMed: CebMeter
  med: Int!
}

"""
A condition to be used against `CebMetersAsset` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CebMetersAssetCondition {
  """Checks for equality with the object’s `assetId` field."""
  assetId: String

  """Checks for equality with the object’s `med` field."""
  med: Int
}

"""An input for mutations affecting `CebMetersAsset`"""
input CebMetersAssetInput {
  assetId: String!
  med: Int!
}

"""A connection to a list of `CebMetersAsset` values."""
type CebMetersAssetsConnection {
  """
  A list of edges which contains the `CebMetersAsset` and cursor to aid in pagination.
  """
  edges: [CebMetersAssetsEdge!]!

  """A list of `CebMetersAsset` objects."""
  nodes: [CebMetersAsset]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CebMetersAsset` you could get from the connection."""
  totalCount: Int!
}

"""A `CebMetersAsset` edge in the connection."""
type CebMetersAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CebMetersAsset` at the end of the edge."""
  node: CebMetersAsset
}

"""Methods to use when ordering `CebMetersAsset`."""
enum CebMetersAssetsOrderBy {
  ASSET_ID_ASC
  ASSET_ID_DESC
  MED_ASC
  MED_DESC
  NATURAL
}

"""A connection to a list of `CebMeter` values."""
type CebMetersConnection {
  """
  A list of edges which contains the `CebMeter` and cursor to aid in pagination.
  """
  edges: [CebMetersEdge!]!

  """A list of `CebMeter` objects."""
  nodes: [CebMeter]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CebMeter` you could get from the connection."""
  totalCount: Int!
}

"""A `CebMeter` edge in the connection."""
type CebMetersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CebMeter` at the end of the edge."""
  node: CebMeter
}

"""Methods to use when ordering `CebMeter`."""
enum CebMetersOrderBy {
  CLASSE_ASC
  CLASSE_DESC
  CONTRATO_ASC
  CONTRATO_DESC
  DCF_ASC
  DCF_DESC
  DCP_ASC
  DCP_DESC
  GRUPO_ASC
  GRUPO_DESC
  ID_ASC
  ID_DESC
  LIGACAO_ASC
  LIGACAO_DESC
  MED_ASC
  MED_DESC
  MODTAR_ASC
  MODTAR_DESC
  NATURAL
  NOME_ASC
  NOME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUBCLASSE_ASC
  SUBCLASSE_DESC
  SUBGRUPO_ASC
  SUBGRUPO_DESC
}

"""All input for the create `Asset` mutation."""
input CreateAssetInput {
  """The `Asset` to be created by this mutation."""
  asset: AssetInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Asset` mutation."""
type CreateAssetPayload {
  """The `Asset` that was created by this mutation."""
  asset: Asset

  """An edge for our `Asset`. May be used by Relay 1."""
  assetEdge(
    """The method to use when ordering `Asset`."""
    orderBy: [AssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssetsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `AssetsParent` mutation."""
input CreateAssetsParentInput {
  """The `AssetsParent` to be created by this mutation."""
  assetsParent: AssetsParentInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AssetsParent` mutation."""
type CreateAssetsParentPayload {
  """Reads a single `Asset` that is related to this `AssetsParent`."""
  assetById: Asset

  """Reads a single `Asset` that is related to this `AssetsParent`."""
  assetByParent: Asset

  """The `AssetsParent` that was created by this mutation."""
  assetsParent: AssetsParent

  """An edge for our `AssetsParent`. May be used by Relay 1."""
  assetsParentEdge(
    """The method to use when ordering `AssetsParent`."""
    orderBy: [AssetsParentsOrderBy!] = [NATURAL]
  ): AssetsParentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CaesbDatum` mutation."""
input CreateCaesbDatumInput {
  """The `CaesbDatum` to be created by this mutation."""
  caesbDatum: CaesbDatumInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CaesbDatum` mutation."""
type CreateCaesbDatumPayload {
  """The `CaesbDatum` that was created by this mutation."""
  caesbDatum: CaesbDatum

  """An edge for our `CaesbDatum`. May be used by Relay 1."""
  caesbDatumEdge(
    """The method to use when ordering `CaesbDatum`."""
    orderBy: [CaesbDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbDataEdge

  """Reads a single `CaesbMeter` that is related to this `CaesbDatum`."""
  caesbMeterByMed: CaesbMeter

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CaesbMeter` mutation."""
input CreateCaesbMeterInput {
  """The `CaesbMeter` to be created by this mutation."""
  caesbMeter: CaesbMeterInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CaesbMeter` mutation."""
type CreateCaesbMeterPayload {
  """The `CaesbMeter` that was created by this mutation."""
  caesbMeter: CaesbMeter

  """An edge for our `CaesbMeter`. May be used by Relay 1."""
  caesbMeterEdge(
    """The method to use when ordering `CaesbMeter`."""
    orderBy: [CaesbMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbMetersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CaesbMetersAsset` mutation."""
input CreateCaesbMetersAssetInput {
  """The `CaesbMetersAsset` to be created by this mutation."""
  caesbMetersAsset: CaesbMetersAssetInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CaesbMetersAsset` mutation."""
type CreateCaesbMetersAssetPayload {
  """Reads a single `Asset` that is related to this `CaesbMetersAsset`."""
  assetByAssetId: Asset

  """
  Reads a single `CaesbMeter` that is related to this `CaesbMetersAsset`.
  """
  caesbMeterByMed: CaesbMeter

  """The `CaesbMetersAsset` that was created by this mutation."""
  caesbMetersAsset: CaesbMetersAsset

  """An edge for our `CaesbMetersAsset`. May be used by Relay 1."""
  caesbMetersAssetEdge(
    """The method to use when ordering `CaesbMetersAsset`."""
    orderBy: [CaesbMetersAssetsOrderBy!] = [NATURAL]
  ): CaesbMetersAssetsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CebDatum` mutation."""
input CreateCebDatumInput {
  """The `CebDatum` to be created by this mutation."""
  cebDatum: CebDatumInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CebDatum` mutation."""
type CreateCebDatumPayload {
  """The `CebDatum` that was created by this mutation."""
  cebDatum: CebDatum

  """An edge for our `CebDatum`. May be used by Relay 1."""
  cebDatumEdge(
    """The method to use when ordering `CebDatum`."""
    orderBy: [CebDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebDataEdge

  """Reads a single `CebMeter` that is related to this `CebDatum`."""
  cebMeterByMed: CebMeter

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CebMeter` mutation."""
input CreateCebMeterInput {
  """The `CebMeter` to be created by this mutation."""
  cebMeter: CebMeterInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CebMeter` mutation."""
type CreateCebMeterPayload {
  """The `CebMeter` that was created by this mutation."""
  cebMeter: CebMeter

  """An edge for our `CebMeter`. May be used by Relay 1."""
  cebMeterEdge(
    """The method to use when ordering `CebMeter`."""
    orderBy: [CebMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebMetersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CebMetersAsset` mutation."""
input CreateCebMetersAssetInput {
  """The `CebMetersAsset` to be created by this mutation."""
  cebMetersAsset: CebMetersAssetInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CebMetersAsset` mutation."""
type CreateCebMetersAssetPayload {
  """Reads a single `Asset` that is related to this `CebMetersAsset`."""
  assetByAssetId: Asset

  """Reads a single `CebMeter` that is related to this `CebMetersAsset`."""
  cebMeterByMed: CebMeter

  """The `CebMetersAsset` that was created by this mutation."""
  cebMetersAsset: CebMetersAsset

  """An edge for our `CebMetersAsset`. May be used by Relay 1."""
  cebMetersAssetEdge(
    """The method to use when ordering `CebMetersAsset`."""
    orderBy: [CebMetersAssetsOrderBy!] = [NATURAL]
  ): CebMetersAssetsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Department` mutation."""
input CreateDepartmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Department` to be created by this mutation."""
  department: DepartmentInput!
}

"""The output of our create `Department` mutation."""
type CreateDepartmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Department` that was created by this mutation."""
  department: Department

  """An edge for our `Department`. May be used by Relay 1."""
  departmentEdge(
    """The method to use when ordering `Department`."""
    orderBy: [DepartmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DepartmentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `DepartmentsParent` mutation."""
input CreateDepartmentsParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DepartmentsParent` to be created by this mutation."""
  departmentsParent: DepartmentsParentInput!
}

"""The output of our create `DepartmentsParent` mutation."""
type CreateDepartmentsParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Department` that is related to this `DepartmentsParent`.
  """
  departmentByNome: Department

  """
  Reads a single `Department` that is related to this `DepartmentsParent`.
  """
  departmentByParent: Department

  """The `DepartmentsParent` that was created by this mutation."""
  departmentsParent: DepartmentsParent

  """An edge for our `DepartmentsParent`. May be used by Relay 1."""
  departmentsParentEdge(
    """The method to use when ordering `DepartmentsParent`."""
    orderBy: [DepartmentsParentsOrderBy!] = [NATURAL]
  ): DepartmentsParentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Teste` mutation."""
input CreateTesteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Teste` to be created by this mutation."""
  teste: TesteInput!
}

"""The output of our create `Teste` mutation."""
type CreateTestePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Teste` that was created by this mutation."""
  teste: Teste

  """An edge for our `Teste`. May be used by Relay 1."""
  testeEdge(
    """The method to use when ordering `Teste`."""
    orderBy: [TestesOrderBy!] = [NATURAL]
  ): TestesEdge
}

"""All input for the `createWo` mutation."""
input CreateWoInput {
  arg0: JSON

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createWo` mutation."""
type CreateWoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `WorkOrder` mutation."""
input CreateWorkOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WorkOrder` to be created by this mutation."""
  workOrder: WorkOrderInput!
}

"""The output of our create `WorkOrder` mutation."""
type CreateWorkOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WorkOrder` that was created by this mutation."""
  workOrder: WorkOrder

  """An edge for our `WorkOrder`. May be used by Relay 1."""
  workOrderEdge(
    """The method to use when ordering `WorkOrder`."""
    orderBy: [WorkOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkOrdersEdge
}

"""All input for the create `WosAsset` mutation."""
input CreateWosAssetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WosAsset` to be created by this mutation."""
  wosAsset: WosAssetInput!
}

"""The output of our create `WosAsset` mutation."""
type CreateWosAssetPayload {
  """Reads a single `Asset` that is related to this `WosAsset`."""
  assetByAssetId: Asset

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `WorkOrder` that is related to this `WosAsset`."""
  workOrderByWoId: WorkOrder

  """The `WosAsset` that was created by this mutation."""
  wosAsset: WosAsset

  """An edge for our `WosAsset`. May be used by Relay 1."""
  wosAssetEdge(
    """The method to use when ordering `WosAsset`."""
    orderBy: [WosAssetsOrderBy!] = [NATURAL]
  ): WosAssetsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteAssetById` mutation."""
input DeleteAssetByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteAsset` mutation."""
input DeleteAssetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Asset` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Asset` mutation."""
type DeleteAssetPayload {
  """The `Asset` that was deleted by this mutation."""
  asset: Asset

  """An edge for our `Asset`. May be used by Relay 1."""
  assetEdge(
    """The method to use when ordering `Asset`."""
    orderBy: [AssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssetsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAssetId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCaesbDatumByMedAndAamm` mutation."""
input DeleteCaesbDatumByMedAndAammInput {
  aamm: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `deleteCaesbDatum` mutation."""
input DeleteCaesbDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CaesbDatum` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CaesbDatum` mutation."""
type DeleteCaesbDatumPayload {
  """The `CaesbDatum` that was deleted by this mutation."""
  caesbDatum: CaesbDatum

  """An edge for our `CaesbDatum`. May be used by Relay 1."""
  caesbDatumEdge(
    """The method to use when ordering `CaesbDatum`."""
    orderBy: [CaesbDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbDataEdge

  """Reads a single `CaesbMeter` that is related to this `CaesbDatum`."""
  caesbMeterByMed: CaesbMeter

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCaesbDatumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCaesbMeterByMed` mutation."""
input DeleteCaesbMeterByMedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `deleteCaesbMeter` mutation."""
input DeleteCaesbMeterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CaesbMeter` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CaesbMeter` mutation."""
type DeleteCaesbMeterPayload {
  """The `CaesbMeter` that was deleted by this mutation."""
  caesbMeter: CaesbMeter

  """An edge for our `CaesbMeter`. May be used by Relay 1."""
  caesbMeterEdge(
    """The method to use when ordering `CaesbMeter`."""
    orderBy: [CaesbMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbMetersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCaesbMeterId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCebDatumByMedAndAamm` mutation."""
input DeleteCebDatumByMedAndAammInput {
  aamm: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `deleteCebDatum` mutation."""
input DeleteCebDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CebDatum` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CebDatum` mutation."""
type DeleteCebDatumPayload {
  """The `CebDatum` that was deleted by this mutation."""
  cebDatum: CebDatum

  """An edge for our `CebDatum`. May be used by Relay 1."""
  cebDatumEdge(
    """The method to use when ordering `CebDatum`."""
    orderBy: [CebDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebDataEdge

  """Reads a single `CebMeter` that is related to this `CebDatum`."""
  cebMeterByMed: CebMeter

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCebDatumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCebMeterByMed` mutation."""
input DeleteCebMeterByMedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `deleteCebMeter` mutation."""
input DeleteCebMeterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CebMeter` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CebMeter` mutation."""
type DeleteCebMeterPayload {
  """The `CebMeter` that was deleted by this mutation."""
  cebMeter: CebMeter

  """An edge for our `CebMeter`. May be used by Relay 1."""
  cebMeterEdge(
    """The method to use when ordering `CebMeter`."""
    orderBy: [CebMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebMetersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCebMeterId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDepartmentByNome` mutation."""
input DeleteDepartmentByNomeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  nome: String!
}

"""All input for the `deleteDepartment` mutation."""
input DeleteDepartmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Department` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Department` mutation."""
type DeleteDepartmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedDepartmentId: ID

  """The `Department` that was deleted by this mutation."""
  department: Department

  """An edge for our `Department`. May be used by Relay 1."""
  departmentEdge(
    """The method to use when ordering `Department`."""
    orderBy: [DepartmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DepartmentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteWorkOrderById` mutation."""
input DeleteWorkOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteWorkOrder` mutation."""
input DeleteWorkOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WorkOrder` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `WorkOrder` mutation."""
type DeleteWorkOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedWorkOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WorkOrder` that was deleted by this mutation."""
  workOrder: WorkOrder

  """An edge for our `WorkOrder`. May be used by Relay 1."""
  workOrderEdge(
    """The method to use when ordering `WorkOrder`."""
    orderBy: [WorkOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkOrdersEdge
}

type Department implements Node {
  """Reads and enables pagination through a set of `DepartmentsParent`."""
  departmentsParentsByNome(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DepartmentsParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DepartmentsParent`."""
    orderBy: [DepartmentsParentsOrderBy!] = [NATURAL]
  ): DepartmentsParentsConnection!

  """Reads and enables pagination through a set of `DepartmentsParent`."""
  departmentsParentsByParent(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DepartmentsParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DepartmentsParent`."""
    orderBy: [DepartmentsParentsOrderBy!] = [NATURAL]
  ): DepartmentsParentsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  nome: String!
}

"""
A condition to be used against `Department` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DepartmentCondition {
  """Checks for equality with the object’s `nome` field."""
  nome: String
}

"""An input for mutations affecting `Department`"""
input DepartmentInput {
  nome: String!
}

"""
Represents an update to a `Department`. Fields that are set will be updated.
"""
input DepartmentPatch {
  nome: String
}

"""A connection to a list of `Department` values."""
type DepartmentsConnection {
  """
  A list of edges which contains the `Department` and cursor to aid in pagination.
  """
  edges: [DepartmentsEdge!]!

  """A list of `Department` objects."""
  nodes: [Department]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Department` you could get from the connection."""
  totalCount: Int!
}

"""A `Department` edge in the connection."""
type DepartmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Department` at the end of the edge."""
  node: Department
}

"""Methods to use when ordering `Department`."""
enum DepartmentsOrderBy {
  NATURAL
  NOME_ASC
  NOME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type DepartmentsParent {
  """
  Reads a single `Department` that is related to this `DepartmentsParent`.
  """
  departmentByNome: Department

  """
  Reads a single `Department` that is related to this `DepartmentsParent`.
  """
  departmentByParent: Department
  nome: String
  parent: String
}

"""
A condition to be used against `DepartmentsParent` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DepartmentsParentCondition {
  """Checks for equality with the object’s `nome` field."""
  nome: String

  """Checks for equality with the object’s `parent` field."""
  parent: String
}

"""An input for mutations affecting `DepartmentsParent`"""
input DepartmentsParentInput {
  nome: String
  parent: String
}

"""A connection to a list of `DepartmentsParent` values."""
type DepartmentsParentsConnection {
  """
  A list of edges which contains the `DepartmentsParent` and cursor to aid in pagination.
  """
  edges: [DepartmentsParentsEdge!]!

  """A list of `DepartmentsParent` objects."""
  nodes: [DepartmentsParent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DepartmentsParent` you could get from the connection.
  """
  totalCount: Int!
}

"""A `DepartmentsParent` edge in the connection."""
type DepartmentsParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DepartmentsParent` at the end of the edge."""
  node: DepartmentsParent
}

"""Methods to use when ordering `DepartmentsParent`."""
enum DepartmentsParentsOrderBy {
  NATURAL
  NOME_ASC
  NOME_DESC
  PARENT_ASC
  PARENT_DESC
}

"""All input for the `getAllAssets` mutation."""
input GetAllAssetsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getAllAssets` mutation."""
type GetAllAssetsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [GetAllAssetsRecord]
}

"""The return type of our `getAllAssets` mutation."""
type GetAllAssetsRecord {
  areaconst: Float
  id: String
  lat: Float
  listWos: [Int]
  lon: Float
  modelo: String
  nome: String
  parent: String
  serie: String
  subnome: String
  tipo: String
  visita: Boolean
}

"""All input for the `getAllCaesbMeters` mutation."""
input GetAllCaesbMetersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getAllCaesbMeters` mutation."""
type GetAllCaesbMetersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [GetAllCaesbMetersRecord]
}

"""The return type of our `getAllCaesbMeters` mutation."""
type GetAllCaesbMetersRecord {
  cat: Int
  contrato: String
  hidrom: String
  id: String
  locais: [String]
  med: Int
  nome: String
}

"""All input for the `getAllCebMeters` mutation."""
input GetAllCebMetersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getAllCebMeters` mutation."""
type GetAllCebMetersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [GetAllCebMetersRecord]
}

"""The return type of our `getAllCebMeters` mutation."""
type GetAllCebMetersRecord {
  classe: String
  contrato: String
  dcf: Int
  dcp: Int
  grupo: String
  id: String
  ligacao: String
  locais: [String]
  med: Int
  modtar: String
  nome: String
  subclasse: String
  subgrupo: String
}

"""All input for the `getAllWorkOrders` mutation."""
input GetAllWorkOrdersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getAllWorkOrders` mutation."""
type GetAllWorkOrdersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [GetAllWorkOrdersRecord]
}

"""The return type of our `getAllWorkOrders` mutation."""
type GetAllWorkOrdersRecord {
  ans: String
  categoria: String
  conferido: String
  contatoEmail: String
  contatoNome: String
  contatoTel: String
  dataAtualiz: String
  dataCriacao: String
  dataInicial: String
  dataPrazo: String
  descricao: String
  executante: String
  id: Int
  listAssets: [String]
  lugar: String
  mensagem: String
  multitarefa: String
  orcamento: String
  origem: String
  osNum: String
  prioridade: String
  realizado: Int
  responsavel: String
  servico: String
  sigad: String
  solicNome: String
  solicOrgao: String
  status1: String
  status2: String
}

"""All input for the `getAsset` mutation."""
input GetAssetInput {
  arg0: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getAsset` mutation."""
type GetAssetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [GetAssetRecord]
}

"""The return type of our `getAsset` mutation."""
type GetAssetRecord {
  areaconst: Float
  id: String
  lat: Float
  listWos: [Int]
  lon: Float
  modelo: String
  nome: String
  parent: String
  serie: String
  subnome: String
  tipo: String
  visita: Boolean
}

"""All input for the `getCaesbBills` mutation."""
input GetCaesbBillsInput {
  arg0: Int
  arg1: Int
  arg2: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getCaesbBills` mutation."""
type GetCaesbBillsPayload {
  caesbData: [CaesbDatum]

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `getCebBills` mutation."""
input GetCebBillsInput {
  arg0: Int
  arg1: Int
  arg2: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getCebBills` mutation."""
type GetCebBillsPayload {
  cebData: [CebDatum]

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `getWorkOrder` mutation."""
input GetWorkOrderInput {
  arg0: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getWorkOrder` mutation."""
type GetWorkOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [GetWorkOrderRecord]
}

"""The return type of our `getWorkOrder` mutation."""
type GetWorkOrderRecord {
  ans: String
  categoria: String
  conferido: String
  contatoEmail: String
  contatoNome: String
  contatoTel: String
  dataAtualiz: String
  dataCriacao: String
  dataInicial: String
  dataPrazo: String
  descricao: String
  executante: String
  id: Int
  listAssets: [String]
  lugar: String
  mensagem: String
  multitarefa: String
  orcamento: String
  origem: String
  osNum: String
  prioridade: String
  realizado: Int
  responsavel: String
  servico: String
  sigad: String
  solicNome: String
  solicOrgao: String
  status1: String
  status2: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Asset`."""
  createAsset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssetInput!
  ): CreateAssetPayload

  """Creates a single `AssetsParent`."""
  createAssetsParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssetsParentInput!
  ): CreateAssetsParentPayload

  """Creates a single `CaesbDatum`."""
  createCaesbDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaesbDatumInput!
  ): CreateCaesbDatumPayload

  """Creates a single `CaesbMeter`."""
  createCaesbMeter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaesbMeterInput!
  ): CreateCaesbMeterPayload

  """Creates a single `CaesbMetersAsset`."""
  createCaesbMetersAsset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaesbMetersAssetInput!
  ): CreateCaesbMetersAssetPayload

  """Creates a single `CebDatum`."""
  createCebDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCebDatumInput!
  ): CreateCebDatumPayload

  """Creates a single `CebMeter`."""
  createCebMeter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCebMeterInput!
  ): CreateCebMeterPayload

  """Creates a single `CebMetersAsset`."""
  createCebMetersAsset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCebMetersAssetInput!
  ): CreateCebMetersAssetPayload

  """Creates a single `Department`."""
  createDepartment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDepartmentInput!
  ): CreateDepartmentPayload

  """Creates a single `DepartmentsParent`."""
  createDepartmentsParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDepartmentsParentInput!
  ): CreateDepartmentsParentPayload

  """Creates a single `Teste`."""
  createTeste(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTesteInput!
  ): CreateTestePayload
  createWo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWoInput!
  ): CreateWoPayload

  """Creates a single `WorkOrder`."""
  createWorkOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWorkOrderInput!
  ): CreateWorkOrderPayload

  """Creates a single `WosAsset`."""
  createWosAsset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWosAssetInput!
  ): CreateWosAssetPayload

  """Deletes a single `Asset` using its globally unique id."""
  deleteAsset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssetInput!
  ): DeleteAssetPayload

  """Deletes a single `Asset` using a unique key."""
  deleteAssetById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssetByIdInput!
  ): DeleteAssetPayload

  """Deletes a single `CaesbDatum` using its globally unique id."""
  deleteCaesbDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaesbDatumInput!
  ): DeleteCaesbDatumPayload

  """Deletes a single `CaesbDatum` using a unique key."""
  deleteCaesbDatumByMedAndAamm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaesbDatumByMedAndAammInput!
  ): DeleteCaesbDatumPayload

  """Deletes a single `CaesbMeter` using its globally unique id."""
  deleteCaesbMeter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaesbMeterInput!
  ): DeleteCaesbMeterPayload

  """Deletes a single `CaesbMeter` using a unique key."""
  deleteCaesbMeterByMed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaesbMeterByMedInput!
  ): DeleteCaesbMeterPayload

  """Deletes a single `CebDatum` using its globally unique id."""
  deleteCebDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCebDatumInput!
  ): DeleteCebDatumPayload

  """Deletes a single `CebDatum` using a unique key."""
  deleteCebDatumByMedAndAamm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCebDatumByMedAndAammInput!
  ): DeleteCebDatumPayload

  """Deletes a single `CebMeter` using its globally unique id."""
  deleteCebMeter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCebMeterInput!
  ): DeleteCebMeterPayload

  """Deletes a single `CebMeter` using a unique key."""
  deleteCebMeterByMed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCebMeterByMedInput!
  ): DeleteCebMeterPayload

  """Deletes a single `Department` using its globally unique id."""
  deleteDepartment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDepartmentInput!
  ): DeleteDepartmentPayload

  """Deletes a single `Department` using a unique key."""
  deleteDepartmentByNome(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDepartmentByNomeInput!
  ): DeleteDepartmentPayload

  """Deletes a single `WorkOrder` using its globally unique id."""
  deleteWorkOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWorkOrderInput!
  ): DeleteWorkOrderPayload

  """Deletes a single `WorkOrder` using a unique key."""
  deleteWorkOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWorkOrderByIdInput!
  ): DeleteWorkOrderPayload
  getAllAssets(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetAllAssetsInput!
  ): GetAllAssetsPayload
  getAllCaesbMeters(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetAllCaesbMetersInput!
  ): GetAllCaesbMetersPayload
  getAllCebMeters(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetAllCebMetersInput!
  ): GetAllCebMetersPayload
  getAllWorkOrders(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetAllWorkOrdersInput!
  ): GetAllWorkOrdersPayload
  getAsset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetAssetInput!
  ): GetAssetPayload
  getCaesbBills(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetCaesbBillsInput!
  ): GetCaesbBillsPayload
  getCebBills(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetCebBillsInput!
  ): GetCebBillsPayload
  getWorkOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetWorkOrderInput!
  ): GetWorkOrderPayload

  """Updates a single `Asset` using its globally unique id and a patch."""
  updateAsset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssetInput!
  ): UpdateAssetPayload

  """Updates a single `Asset` using a unique key and a patch."""
  updateAssetById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssetByIdInput!
  ): UpdateAssetPayload

  """
  Updates a single `CaesbDatum` using its globally unique id and a patch.
  """
  updateCaesbDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaesbDatumInput!
  ): UpdateCaesbDatumPayload

  """Updates a single `CaesbDatum` using a unique key and a patch."""
  updateCaesbDatumByMedAndAamm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaesbDatumByMedAndAammInput!
  ): UpdateCaesbDatumPayload

  """
  Updates a single `CaesbMeter` using its globally unique id and a patch.
  """
  updateCaesbMeter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaesbMeterInput!
  ): UpdateCaesbMeterPayload

  """Updates a single `CaesbMeter` using a unique key and a patch."""
  updateCaesbMeterByMed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaesbMeterByMedInput!
  ): UpdateCaesbMeterPayload

  """Updates a single `CebDatum` using its globally unique id and a patch."""
  updateCebDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCebDatumInput!
  ): UpdateCebDatumPayload

  """Updates a single `CebDatum` using a unique key and a patch."""
  updateCebDatumByMedAndAamm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCebDatumByMedAndAammInput!
  ): UpdateCebDatumPayload

  """Updates a single `CebMeter` using its globally unique id and a patch."""
  updateCebMeter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCebMeterInput!
  ): UpdateCebMeterPayload

  """Updates a single `CebMeter` using a unique key and a patch."""
  updateCebMeterByMed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCebMeterByMedInput!
  ): UpdateCebMeterPayload

  """
  Updates a single `Department` using its globally unique id and a patch.
  """
  updateDepartment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDepartmentInput!
  ): UpdateDepartmentPayload

  """Updates a single `Department` using a unique key and a patch."""
  updateDepartmentByNome(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDepartmentByNomeInput!
  ): UpdateDepartmentPayload

  """Updates a single `WorkOrder` using its globally unique id and a patch."""
  updateWorkOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkOrderInput!
  ): UpdateWorkOrderPayload

  """Updates a single `WorkOrder` using a unique key and a patch."""
  updateWorkOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkOrderByIdInput!
  ): UpdateWorkOrderPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Asset`."""
  allAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Asset`."""
    orderBy: [AssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssetsConnection

  """Reads and enables pagination through a set of `AssetsParent`."""
  allAssetsParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssetsParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AssetsParent`."""
    orderBy: [AssetsParentsOrderBy!] = [NATURAL]
  ): AssetsParentsConnection

  """Reads and enables pagination through a set of `CaesbDatum`."""
  allCaesbData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaesbDatumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaesbDatum`."""
    orderBy: [CaesbDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbDataConnection

  """Reads and enables pagination through a set of `CaesbMeter`."""
  allCaesbMeters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaesbMeterCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaesbMeter`."""
    orderBy: [CaesbMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbMetersConnection

  """Reads and enables pagination through a set of `CaesbMetersAsset`."""
  allCaesbMetersAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaesbMetersAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaesbMetersAsset`."""
    orderBy: [CaesbMetersAssetsOrderBy!] = [NATURAL]
  ): CaesbMetersAssetsConnection

  """Reads and enables pagination through a set of `CebDatum`."""
  allCebData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CebDatumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CebDatum`."""
    orderBy: [CebDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebDataConnection

  """Reads and enables pagination through a set of `CebMeter`."""
  allCebMeters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CebMeterCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CebMeter`."""
    orderBy: [CebMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebMetersConnection

  """Reads and enables pagination through a set of `CebMetersAsset`."""
  allCebMetersAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CebMetersAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CebMetersAsset`."""
    orderBy: [CebMetersAssetsOrderBy!] = [NATURAL]
  ): CebMetersAssetsConnection

  """Reads and enables pagination through a set of `Department`."""
  allDepartments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DepartmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Department`."""
    orderBy: [DepartmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DepartmentsConnection

  """Reads and enables pagination through a set of `DepartmentsParent`."""
  allDepartmentsParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DepartmentsParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DepartmentsParent`."""
    orderBy: [DepartmentsParentsOrderBy!] = [NATURAL]
  ): DepartmentsParentsConnection

  """Reads and enables pagination through a set of `Teste`."""
  allTestes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TesteCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Teste`."""
    orderBy: [TestesOrderBy!] = [NATURAL]
  ): TestesConnection

  """Reads and enables pagination through a set of `WorkOrder`."""
  allWorkOrders(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkOrderCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WorkOrder`."""
    orderBy: [WorkOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkOrdersConnection

  """Reads and enables pagination through a set of `WosAsset`."""
  allWosAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WosAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WosAsset`."""
    orderBy: [WosAssetsOrderBy!] = [NATURAL]
  ): WosAssetsConnection

  """Reads a single `Asset` using its globally unique `ID`."""
  asset(
    """The globally unique `ID` to be used in selecting a single `Asset`."""
    nodeId: ID!
  ): Asset
  assetById(id: String!): Asset

  """Reads a single `CaesbDatum` using its globally unique `ID`."""
  caesbDatum(
    """
    The globally unique `ID` to be used in selecting a single `CaesbDatum`.
    """
    nodeId: ID!
  ): CaesbDatum
  caesbDatumByMedAndAamm(aamm: Int!, med: Int!): CaesbDatum

  """Reads a single `CaesbMeter` using its globally unique `ID`."""
  caesbMeter(
    """
    The globally unique `ID` to be used in selecting a single `CaesbMeter`.
    """
    nodeId: ID!
  ): CaesbMeter
  caesbMeterByMed(med: Int!): CaesbMeter

  """Reads a single `CebDatum` using its globally unique `ID`."""
  cebDatum(
    """The globally unique `ID` to be used in selecting a single `CebDatum`."""
    nodeId: ID!
  ): CebDatum
  cebDatumByMedAndAamm(aamm: Int!, med: Int!): CebDatum

  """Reads a single `CebMeter` using its globally unique `ID`."""
  cebMeter(
    """The globally unique `ID` to be used in selecting a single `CebMeter`."""
    nodeId: ID!
  ): CebMeter
  cebMeterByMed(med: Int!): CebMeter

  """Reads a single `Department` using its globally unique `ID`."""
  department(
    """
    The globally unique `ID` to be used in selecting a single `Department`.
    """
    nodeId: ID!
  ): Department
  departmentByNome(nome: String!): Department

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `WorkOrder` using its globally unique `ID`."""
  workOrder(
    """The globally unique `ID` to be used in selecting a single `WorkOrder`."""
    nodeId: ID!
  ): WorkOrder
  workOrderById(id: Int!): WorkOrder
}

type Teste {
  f1: Int
  f2: String
}

"""
A condition to be used against `Teste` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TesteCondition {
  """Checks for equality with the object’s `f1` field."""
  f1: Int

  """Checks for equality with the object’s `f2` field."""
  f2: String
}

"""An input for mutations affecting `Teste`"""
input TesteInput {
  f1: Int
  f2: String
}

"""A connection to a list of `Teste` values."""
type TestesConnection {
  """
  A list of edges which contains the `Teste` and cursor to aid in pagination.
  """
  edges: [TestesEdge!]!

  """A list of `Teste` objects."""
  nodes: [Teste]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Teste` you could get from the connection."""
  totalCount: Int!
}

"""A `Teste` edge in the connection."""
type TestesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Teste` at the end of the edge."""
  node: Teste
}

"""Methods to use when ordering `Teste`."""
enum TestesOrderBy {
  F1_ASC
  F1_DESC
  F2_ASC
  F2_DESC
  NATURAL
}

"""All input for the `updateAssetById` mutation."""
input UpdateAssetByIdInput {
  """
  An object where the defined keys will be set on the `Asset` being updated.
  """
  assetPatch: AssetPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `updateAsset` mutation."""
input UpdateAssetInput {
  """
  An object where the defined keys will be set on the `Asset` being updated.
  """
  assetPatch: AssetPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Asset` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Asset` mutation."""
type UpdateAssetPayload {
  """The `Asset` that was updated by this mutation."""
  asset: Asset

  """An edge for our `Asset`. May be used by Relay 1."""
  assetEdge(
    """The method to use when ordering `Asset`."""
    orderBy: [AssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssetsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCaesbDatumByMedAndAamm` mutation."""
input UpdateCaesbDatumByMedAndAammInput {
  aamm: Int!

  """
  An object where the defined keys will be set on the `CaesbDatum` being updated.
  """
  caesbDatumPatch: CaesbDatumPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `updateCaesbDatum` mutation."""
input UpdateCaesbDatumInput {
  """
  An object where the defined keys will be set on the `CaesbDatum` being updated.
  """
  caesbDatumPatch: CaesbDatumPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CaesbDatum` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CaesbDatum` mutation."""
type UpdateCaesbDatumPayload {
  """The `CaesbDatum` that was updated by this mutation."""
  caesbDatum: CaesbDatum

  """An edge for our `CaesbDatum`. May be used by Relay 1."""
  caesbDatumEdge(
    """The method to use when ordering `CaesbDatum`."""
    orderBy: [CaesbDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbDataEdge

  """Reads a single `CaesbMeter` that is related to this `CaesbDatum`."""
  caesbMeterByMed: CaesbMeter

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCaesbMeterByMed` mutation."""
input UpdateCaesbMeterByMedInput {
  """
  An object where the defined keys will be set on the `CaesbMeter` being updated.
  """
  caesbMeterPatch: CaesbMeterPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `updateCaesbMeter` mutation."""
input UpdateCaesbMeterInput {
  """
  An object where the defined keys will be set on the `CaesbMeter` being updated.
  """
  caesbMeterPatch: CaesbMeterPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CaesbMeter` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CaesbMeter` mutation."""
type UpdateCaesbMeterPayload {
  """The `CaesbMeter` that was updated by this mutation."""
  caesbMeter: CaesbMeter

  """An edge for our `CaesbMeter`. May be used by Relay 1."""
  caesbMeterEdge(
    """The method to use when ordering `CaesbMeter`."""
    orderBy: [CaesbMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaesbMetersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCebDatumByMedAndAamm` mutation."""
input UpdateCebDatumByMedAndAammInput {
  aamm: Int!

  """
  An object where the defined keys will be set on the `CebDatum` being updated.
  """
  cebDatumPatch: CebDatumPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `updateCebDatum` mutation."""
input UpdateCebDatumInput {
  """
  An object where the defined keys will be set on the `CebDatum` being updated.
  """
  cebDatumPatch: CebDatumPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CebDatum` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CebDatum` mutation."""
type UpdateCebDatumPayload {
  """The `CebDatum` that was updated by this mutation."""
  cebDatum: CebDatum

  """An edge for our `CebDatum`. May be used by Relay 1."""
  cebDatumEdge(
    """The method to use when ordering `CebDatum`."""
    orderBy: [CebDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebDataEdge

  """Reads a single `CebMeter` that is related to this `CebDatum`."""
  cebMeterByMed: CebMeter

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCebMeterByMed` mutation."""
input UpdateCebMeterByMedInput {
  """
  An object where the defined keys will be set on the `CebMeter` being updated.
  """
  cebMeterPatch: CebMeterPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  med: Int!
}

"""All input for the `updateCebMeter` mutation."""
input UpdateCebMeterInput {
  """
  An object where the defined keys will be set on the `CebMeter` being updated.
  """
  cebMeterPatch: CebMeterPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CebMeter` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CebMeter` mutation."""
type UpdateCebMeterPayload {
  """The `CebMeter` that was updated by this mutation."""
  cebMeter: CebMeter

  """An edge for our `CebMeter`. May be used by Relay 1."""
  cebMeterEdge(
    """The method to use when ordering `CebMeter`."""
    orderBy: [CebMetersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CebMetersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDepartmentByNome` mutation."""
input UpdateDepartmentByNomeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Department` being updated.
  """
  departmentPatch: DepartmentPatch!
  nome: String!
}

"""All input for the `updateDepartment` mutation."""
input UpdateDepartmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Department` being updated.
  """
  departmentPatch: DepartmentPatch!

  """
  The globally unique `ID` which will identify a single `Department` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Department` mutation."""
type UpdateDepartmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Department` that was updated by this mutation."""
  department: Department

  """An edge for our `Department`. May be used by Relay 1."""
  departmentEdge(
    """The method to use when ordering `Department`."""
    orderBy: [DepartmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DepartmentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateWorkOrderById` mutation."""
input UpdateWorkOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `WorkOrder` being updated.
  """
  workOrderPatch: WorkOrderPatch!
}

"""All input for the `updateWorkOrder` mutation."""
input UpdateWorkOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WorkOrder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WorkOrder` being updated.
  """
  workOrderPatch: WorkOrderPatch!
}

"""The output of our update `WorkOrder` mutation."""
type UpdateWorkOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `WorkOrder` that was updated by this mutation."""
  workOrder: WorkOrder

  """An edge for our `WorkOrder`. May be used by Relay 1."""
  workOrderEdge(
    """The method to use when ordering `WorkOrder`."""
    orderBy: [WorkOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkOrdersEdge
}

type WorkOrder implements Node {
  ans: String!
  categoria: String!
  conferido: String!
  contatoEmail: String!
  contatoNome: String!
  contatoTel: String!
  dataAtualiz: String!
  dataCriacao: String!
  dataInicial: String!
  dataPrazo: String!
  descricao: String!
  executante: String!
  id: Int!
  lugar: String!
  mensagem: String!
  multitarefa: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  orcamento: String!
  origem: String!
  osNum: String!
  prioridade: String!
  realizado: Int!
  responsavel: String!
  servico: String!
  sigad: String!
  solicNome: String!
  solicOrgao: String!
  status1: String!
  status2: String!

  """Reads and enables pagination through a set of `WosAsset`."""
  wosAssetsByWoId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WosAssetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `WosAsset`."""
    orderBy: [WosAssetsOrderBy!] = [NATURAL]
  ): WosAssetsConnection!
}

"""
A condition to be used against `WorkOrder` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WorkOrderCondition {
  """Checks for equality with the object’s `ans` field."""
  ans: String

  """Checks for equality with the object’s `categoria` field."""
  categoria: String

  """Checks for equality with the object’s `conferido` field."""
  conferido: String

  """Checks for equality with the object’s `contatoEmail` field."""
  contatoEmail: String

  """Checks for equality with the object’s `contatoNome` field."""
  contatoNome: String

  """Checks for equality with the object’s `contatoTel` field."""
  contatoTel: String

  """Checks for equality with the object’s `dataAtualiz` field."""
  dataAtualiz: String

  """Checks for equality with the object’s `dataCriacao` field."""
  dataCriacao: String

  """Checks for equality with the object’s `dataInicial` field."""
  dataInicial: String

  """Checks for equality with the object’s `dataPrazo` field."""
  dataPrazo: String

  """Checks for equality with the object’s `descricao` field."""
  descricao: String

  """Checks for equality with the object’s `executante` field."""
  executante: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lugar` field."""
  lugar: String

  """Checks for equality with the object’s `mensagem` field."""
  mensagem: String

  """Checks for equality with the object’s `multitarefa` field."""
  multitarefa: String

  """Checks for equality with the object’s `orcamento` field."""
  orcamento: String

  """Checks for equality with the object’s `origem` field."""
  origem: String

  """Checks for equality with the object’s `osNum` field."""
  osNum: String

  """Checks for equality with the object’s `prioridade` field."""
  prioridade: String

  """Checks for equality with the object’s `realizado` field."""
  realizado: Int

  """Checks for equality with the object’s `responsavel` field."""
  responsavel: String

  """Checks for equality with the object’s `servico` field."""
  servico: String

  """Checks for equality with the object’s `sigad` field."""
  sigad: String

  """Checks for equality with the object’s `solicNome` field."""
  solicNome: String

  """Checks for equality with the object’s `solicOrgao` field."""
  solicOrgao: String

  """Checks for equality with the object’s `status1` field."""
  status1: String

  """Checks for equality with the object’s `status2` field."""
  status2: String
}

"""An input for mutations affecting `WorkOrder`"""
input WorkOrderInput {
  ans: String!
  categoria: String!
  conferido: String!
  contatoEmail: String!
  contatoNome: String!
  contatoTel: String!
  dataAtualiz: String!
  dataCriacao: String!
  dataInicial: String!
  dataPrazo: String!
  descricao: String!
  executante: String!
  id: Int
  lugar: String!
  mensagem: String!
  multitarefa: String!
  orcamento: String!
  origem: String!
  osNum: String!
  prioridade: String!
  realizado: Int!
  responsavel: String!
  servico: String!
  sigad: String!
  solicNome: String!
  solicOrgao: String!
  status1: String!
  status2: String!
}

"""
Represents an update to a `WorkOrder`. Fields that are set will be updated.
"""
input WorkOrderPatch {
  ans: String
  categoria: String
  conferido: String
  contatoEmail: String
  contatoNome: String
  contatoTel: String
  dataAtualiz: String
  dataCriacao: String
  dataInicial: String
  dataPrazo: String
  descricao: String
  executante: String
  id: Int
  lugar: String
  mensagem: String
  multitarefa: String
  orcamento: String
  origem: String
  osNum: String
  prioridade: String
  realizado: Int
  responsavel: String
  servico: String
  sigad: String
  solicNome: String
  solicOrgao: String
  status1: String
  status2: String
}

"""A connection to a list of `WorkOrder` values."""
type WorkOrdersConnection {
  """
  A list of edges which contains the `WorkOrder` and cursor to aid in pagination.
  """
  edges: [WorkOrdersEdge!]!

  """A list of `WorkOrder` objects."""
  nodes: [WorkOrder]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WorkOrder` you could get from the connection."""
  totalCount: Int!
}

"""A `WorkOrder` edge in the connection."""
type WorkOrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorkOrder` at the end of the edge."""
  node: WorkOrder
}

"""Methods to use when ordering `WorkOrder`."""
enum WorkOrdersOrderBy {
  ANS_ASC
  ANS_DESC
  CATEGORIA_ASC
  CATEGORIA_DESC
  CONFERIDO_ASC
  CONFERIDO_DESC
  CONTATO_EMAIL_ASC
  CONTATO_EMAIL_DESC
  CONTATO_NOME_ASC
  CONTATO_NOME_DESC
  CONTATO_TEL_ASC
  CONTATO_TEL_DESC
  DATA_ATUALIZ_ASC
  DATA_ATUALIZ_DESC
  DATA_CRIACAO_ASC
  DATA_CRIACAO_DESC
  DATA_INICIAL_ASC
  DATA_INICIAL_DESC
  DATA_PRAZO_ASC
  DATA_PRAZO_DESC
  DESCRICAO_ASC
  DESCRICAO_DESC
  EXECUTANTE_ASC
  EXECUTANTE_DESC
  ID_ASC
  ID_DESC
  LUGAR_ASC
  LUGAR_DESC
  MENSAGEM_ASC
  MENSAGEM_DESC
  MULTITAREFA_ASC
  MULTITAREFA_DESC
  NATURAL
  ORCAMENTO_ASC
  ORCAMENTO_DESC
  ORIGEM_ASC
  ORIGEM_DESC
  OS_NUM_ASC
  OS_NUM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRIORIDADE_ASC
  PRIORIDADE_DESC
  REALIZADO_ASC
  REALIZADO_DESC
  RESPONSAVEL_ASC
  RESPONSAVEL_DESC
  SERVICO_ASC
  SERVICO_DESC
  SIGAD_ASC
  SIGAD_DESC
  SOLIC_NOME_ASC
  SOLIC_NOME_DESC
  SOLIC_ORGAO_ASC
  SOLIC_ORGAO_DESC
  STATUS1_ASC
  STATUS1_DESC
  STATUS2_ASC
  STATUS2_DESC
}

type WosAsset {
  """Reads a single `Asset` that is related to this `WosAsset`."""
  assetByAssetId: Asset
  assetId: String
  woId: Int

  """Reads a single `WorkOrder` that is related to this `WosAsset`."""
  workOrderByWoId: WorkOrder
}

"""
A condition to be used against `WosAsset` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WosAssetCondition {
  """Checks for equality with the object’s `assetId` field."""
  assetId: String

  """Checks for equality with the object’s `woId` field."""
  woId: Int
}

"""An input for mutations affecting `WosAsset`"""
input WosAssetInput {
  assetId: String
  woId: Int
}

"""A connection to a list of `WosAsset` values."""
type WosAssetsConnection {
  """
  A list of edges which contains the `WosAsset` and cursor to aid in pagination.
  """
  edges: [WosAssetsEdge!]!

  """A list of `WosAsset` objects."""
  nodes: [WosAsset]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WosAsset` you could get from the connection."""
  totalCount: Int!
}

"""A `WosAsset` edge in the connection."""
type WosAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WosAsset` at the end of the edge."""
  node: WosAsset
}

"""Methods to use when ordering `WosAsset`."""
enum WosAssetsOrderBy {
  ASSET_ID_ASC
  ASSET_ID_DESC
  NATURAL
  WO_ID_ASC
  WO_ID_DESC
}
